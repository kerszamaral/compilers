%{
// parser.ypp file made by Ian Kersz - 2025/1
#define EXIT_SYNTAX_ERROR 3
%}

// C++ parser
%language "c++"

// Use variant for value type, compatible with shared_ptr
%define api.value.type variant
// Use constructor for token type
%define api.token.constructor

%require "3.8" // Minimum version, disables generation of stack.hh file

%code requires {
    // C++ code required for the parser to work
    #include <memory>
    #include "scanner.hpp"
    #include "ast.hpp"

    using symbol = std::shared_ptr<Symbol>;
    using node = std::shared_ptr<Node>;
}

%code {
    // Declaration of the yylex function from lexer, correctly typed
    yy::parser::symbol_type yylex();
}

// Removes the warning about exactly one conflict still existing
%expect 1


%token KW_BYTE
%token KW_INT
%token KW_REAL
%token KW_IF
%token KW_ELSE
%token KW_DO
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
%token OPERATOR_LE
%token OPERATOR_GE
%token OPERATOR_EQ
%token OPERATOR_DIF
%token TK_IDENTIFIER
%token LIT_INT
%token LIT_CHAR
%token LIT_REAL
%token LIT_STRING
%token TOKEN_ERROR

%token '-' ',' ';' ':' '(' ')' '{' '}' '[' ']' '+' '*' '/' '%' '<' '>' '&' '|' '~' '='


%left '~'
%left '&' '|'
%left '+' '-'
%left '*' '/' '%'
%left '<' '>' OPERATOR_LE OPERATOR_GE
%left OPERATOR_EQ OPERATOR_DIF

// Resolves the conflict between the if and else statements
%precedence then
%precedence KW_ELSE

%%

program
    : ldecl
    ;

ldecl
    : decl ldecl
    | %empty
    ;

decl
    : fun_decl
    | var_decl
    | vec_decl
    ;

var_decl
    : var_type TK_IDENTIFIER '='  init_val ';'
    ;

var_type
    : KW_INT
    | KW_REAL
    | KW_BYTE
    ;

init_val
    : LIT_INT
    | LIT_REAL
    | LIT_CHAR
    ;

vec_decl
    : vec_def ';'
    | vec_def '=' vec_init ';'
    ;

vec_def
    : var_type TK_IDENTIFIER '[' LIT_INT ']'
    ;

vec_init
    : init_val
    | init_val ',' vec_init
    ;

fun_decl
    : var_type TK_IDENTIFIER '(' params ')' fun_body
    ;

params
    : param_list
    | %empty
    ;

param_list
    : param_decl ',' param_list
    | param_decl
    ;

param_decl
    : var_type TK_IDENTIFIER
    ;

fun_body
    : cmd_block
    ;

cmd_block
    : '{' cmd_list '}'
    ;

cmd_list
    : cmd cmd_list
    | %empty
    ;

cmd
    : atrib
    | flux_ctrl
    | read_cmd
    | print_cmd
    | return_cmd
    | empty_cmd
    | cmd_block
    ;

atrib
    : TK_IDENTIFIER '=' expr ';'
    | TK_IDENTIFIER '[' expr ']' '=' expr ';'
    ;

expr
    : init_val
    | TK_IDENTIFIER
    | TK_IDENTIFIER '[' expr ']'
    | expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | expr '%' expr
    | expr '<' expr
    | expr '>' expr
    | expr OPERATOR_LE expr
    | expr OPERATOR_GE expr
    | expr OPERATOR_EQ expr
    | expr OPERATOR_DIF expr
    | expr '&' expr
    | expr '|' expr
    | '~' expr
    | fun_call
    | '(' expr ')'
    ;

fun_call
    : TK_IDENTIFIER '(' args ')'
    ;

args
    : arg_list
    | %empty
    ;

arg_list
    : expr ',' arg_list
    | expr
    ;

flux_ctrl
    : if_cmd
    | while_cmd
    | do_while_cmd
    ;

if_cmd
    : KW_IF '(' expr ')' cmd %prec then
    | KW_IF '(' expr ')' cmd KW_ELSE cmd 
    ;

while_cmd
    : KW_WHILE expr KW_DO cmd
    ;

do_while_cmd
    : KW_DO cmd KW_WHILE expr ';'
    ;

read_cmd
    : KW_READ TK_IDENTIFIER ';'
    ;

print_cmd
    : KW_PRINT print_list
    ;

// Causes conflict with expressiong, as we can have the following
// Function call: print  "AA"    test(1*2)   "BB"     ;
// Parsing:       PRINT  STRING  FUNC_CALL   STRING  ';'
// Expression:    print  "AA"    test  (1*2) "BB"     ;
// Parsing:       PRINT  STRING  EXPR  EXPR  STRING  ';'
// And they are both the same according to the grammar
print_list
    : expr print_list
    | LIT_STRING print_list 
    | expr ';'
    | LIT_STRING ';'
    ;

return_cmd
    : KW_RETURN expr ';'
    ;

empty_cmd
    : ';'
    ;

%%

void yy::parser::error(const std::string& msg) {
    std::cerr << "Syntax Error at line " << getLineNumber() << ": " << msg << std::endl;
    std::exit(EXIT_SYNTAX_ERROR);
}